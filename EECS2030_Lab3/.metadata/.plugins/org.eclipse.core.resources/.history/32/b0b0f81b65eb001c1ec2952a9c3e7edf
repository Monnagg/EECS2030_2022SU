package eecs2030.lab3;

/**
 * A utility class containing some matrix/vector operations
 * @author Andriy
 * EECS 2030 Lab 3 SU2022
 */
public class MVMath {
	//TODO
	//ensure this class is a utility class and no objects are ever created

	/**
	 * Multiplies a matrix by a vector
	 * @param m matrix
	 * @param v vector
	 * @return new vector object containing the result
	 * TODO HERE, determine and specify the preconditions, and take an appropriate action
	 */
	public static Vector3 multiply (Matrix3 m, Vector3 v){
		//TODO
		double[][] matrix = m.getElements();
		double[] vector = v.getElements();
		double[] result = new double[vector.length];

		double element;
		for(int i = 0; i < matrix.length; i++) {
			element = 0;
			for(int j = 0; j < matrix[0].length; j++) {
				element += matrix[i][j] * vector[j];
				System.out.println(matrix[i][j] +"*"+vector[j]+"= "+element);

			}
			result[i] = element;
		}
		Vector3 vec = new Vector3(result);

		return vec;
	}

	/**
	 * @param m1 matrix 1
	 * @param m2 matrix 2
	 * @return new matrix object containing the result
	 * TODO the input parameters m1 and m2 should be objects of Matrix3
	 */
	public static Matrix3 multiply (Matrix3 m1, Matrix3 m2){
		//TODO
		double[][] result = new double [3][3];
		double[][] one = m1.getElements();
		double[][] two = m2.getElements();
		double element ;
		for(int k =0; k < one.length; k++) {
			for(int i =0; i < one.length;i++) {
				element = 0;			
				for(int j =0; j < one[0].length;j++) {

					element += one[k][j] * two[j][i];	
					//System.out.println(one[i][j] +"*"+two[j][i]+"= "+element);
				}
				result[k][i] = element;


			}
		}
		Matrix3 m = new Matrix3(result);

		return m;
	}

	/**
	 * Computes a cross product of two vectors
	 * @param v1 vector 1
	 * @param v2 vector 2
	 * @return a new vector object containing the result
	 * TODO HERE, determine and specify the preconditions, and take an appropriate action
	 */
	public static Vector3 crossProduct (Vector3 v1, Vector3 v2){
		//TODO
		return null;
	}

	/**
	 * Computes a dot product of two vectors
	 * @param v1 vector 1
	 * @param v2 vector 2
	 * @return dot product (a scalar)
	 * TODO HERE, determine and specify the preconditions, and take an appropriate action
	 */
	public static double dotProduct (Vector3 v1, Vector3 v2){
		//TODO
		return 0.0;
	}

}
